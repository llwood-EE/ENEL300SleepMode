
#include <avr/io.h>
#include <avr/sleep.h>

//60000 ms of delay which is equal to 1 minute
#define SMALL_DELAY 60000

//300000 ms of delay is equal to 5 min
#define LARGE_DELAY 300000

int time = 0;

int main(void) {
    
    // Enable global interrupts.
    SREG = 0b10000000;


    // Setting bit 6 to '1' selects TTL Level voltage threshold for input reads and interrupt conditions. Bits 2:0 determine what condition an interrupt gets generated (rising edge)
    PORTD.PIN2CTRL = 0b01000010;
    // This clears any previous interrupts generated for pin PD2
    PORTD.INTFLAGS = 0b00000100;

    // This determines the sleep mode the AVR will go into, we will be using the IDLE mode
    set_sleep_mode(SLEEP_MODE_IDLE);

    // Enable pin (PA0) as an output, and (PD2) to be an input for the motion sensor, feel free to change the pins I chose, I just randomly chose so I could finish up the code
    PORTA.DIRSET = 0b00000001;
    PORTD.DIRCLR = 0b00000100;
    
        
    while (1) {

        // Reset timer
        time = 0;

        // If the sensor is high, this evaluates to true
        if(PORTD.IN & 0b00000100)
            //set the pin that controls the electromagnet to high (just picked PA1 because unsure which pin is actually being used to drive the electromagnet)
            PORTA.OUT = 0b00000001;
        
        // If the sensor is low this evaluates to true    
        else{
            // Clear any previous interrupts (interrupts only generated on the rising edge of motion sensor output)
            PORTD.INTFLAGS = 0b00000100;
            
            // While the sensor is low, and 5 minutes hasn't elapsed, wait here
            while(PORTD.IN ^ 0b00000100 && time <= LARGE_DELAY){
                time +=1;
            
                // If 60 seconds passes and the sensor is still low, turn off the electromagnet
                if (time >= SMALL_DELAY)
                    PORTA.OUT = 0b00000000;
                    
        
                // If the sensor stays low for 5 minutes, enter sleep mode
                if (time >= LARGE_DELAY){
                    time = 0;
                    
                    // This function executes multiple sleep related fucntions at once, it calls sleep_enable(), then sleep_cpu(), and then once the device wakes, it calls sleep_disable().
                    sleep_mode();
                    
                    // We configured pin 7 to generate an interrupt on the rising edge of the motion sensor output. if the motion sensor goes high at this point, an interrupt will be generated setting the PORTA.INTFLAG for bit 7 to 1, this will wake the device, and then the INTFLAG bit must be reset
                    // The code resumes right after the call to sleep mode
                    PORTD.INTFLAGS = 0b00000100;
      
      }
     }
    }
   }
  }
 }
